#!/usr/bin/env bash
#
# dotfiles installation script.
#
# Usage:
# ./install (--force)
#

#
# This command is used for both the initial installation and updating.
#
# Source: https://github.com/mathiasbynens/dotfiles/blob/master/bootstrap.sh
#
# Argbash docs: http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_BOOLEAN([force],[],[Force the bootstrap installation script to be executed again])
# ARG_OPTIONAL_BOOLEAN([dry-run],[],[Get a report on what will happen running this script. Nothing on the system will be changed.])
# ARG_OPTIONAL_BOOLEAN([backups],[],[List backups made for this system.])
# ARG_HELP([Run once to install the dotfiles and associated dependencies. Run again to get updates.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.4.1a one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_force=off
_arg_dry_run=off
_arg_backups=off

print_help ()
{
	printf "%s\n" "Run once to install the dotfiles and associated dependencies. Run again to get updates."
	printf 'Usage: %s [--(no-)force] [--(no-)dry-run] [--(no-)backups] [-h|--help]\n' "$0"
	printf "\t%s\n" "--force,--no-force: Force the bootstrap installation script to be executed again (off by default)"
	printf "\t%s\n" "--dry-run,--no-dry-run: Get a report on what will happen running this script. Nothing on the system will be changed. (off by default)"
	printf "\t%s\n" "--backups,--no-backups: List backups made for this system. (off by default)"
	printf "\t%s\n" "-h,--help: Prints help"

}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-force|--force)
				_arg_force="on"
				test "${1:0:5}" = "--no-" && _arg_force="off"
				;;
			--no-dry-run|--dry-run)
				_arg_dry_run="on"
				test "${1:0:5}" = "--no-" && _arg_dry_run="off"
				;;
			--no-backups|--backups)
				_arg_backups="on"
				test "${1:0:5}" = "--no-" && _arg_backups="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


## Parameters parsed and made available by argbash
forced=$_arg_force
is_dry_run=$_arg_dry_run
show_backups=$_arg_backups

## Configuration
dotfiles=(".path" ".bash_profile" ".bash_prompt" ".exports" ".aliases" ".functions" ".extra" ".inputrc" ".osx")
backup_location="$HOME/.dotfile-backups/"


########################################
#  Pre-installation checks.
########################################

## Make sure brew is installed on OSX
if [[ $OSTYPE == "darwin15" ]]; then
  if [[ ! $(type -P brew) ]]; then
    echo "Please install homebrew (brew) before continuing: https://brew.sh/"
  fi
fi

########################################
#  Dry run (--dry-run)
########################################
if [[ $is_dry_run == "on" ]]; then

  ## Report which files would be affected by running this script
  existing_files=()

  for file in ${dotfiles[@]}; do
    if [[ -e "$HOME/$file" ]]; then
        existing_files+=($file)
    fi
  done

  if [[ ${existing_files[@]} != "" ]]; then
    echo "The following file(s) were found in your home directory and would be archived and replaced:"
    for file in ${existing_files[@]}; do
      echo "  - ~/$file"
    done
  fi

  ## Report the software that would be installed - I know this is duplicated. I could possibly set some boolean variables
  ## at the start of the script so that the conditional statment isn't repeated
  echo "Software summary:"

  ## todo: refactor
  if [[ ! $(type -P "node")  ]]; then
    echo "  - node will be installed."
  else
    echo "  - node already installed @ $(type -P node)."
  fi

  if [[ ! $(type -P n)  ]]; then
    echo "  - n will be installed."
  else
    echo "  - n already installed @ $(type -P n)."
  fi

  if [[ ! $(type -P diff-so-fancy)  ]]; then
    echo "  - diff-so-fancy will be installed."
  else
    echo "  - diff-so-fancy already installed @ $(type -P diff-so-fancy)."
  fi

  if [[ ! $(type -P ag)  ]]; then
    echo "  - ag will be installed."
  else
    echo "  - ag already installed @ $(type -P ag)."
  fi

  exit
fi

########################################
#  Backups (--backups)
#  List all backups that have been made so far.
########################################

if [[ $_arg_backups == "on" ]]; then
  if [[ -e $backup_location ]]; then
      echo "Found the following backups @ $backup_location:"
      ls -l $backup_location
    else
      echo "No backups found."
  fi

  exit
fi

########################################
#  Main script
########################################

## Read user input, taking the first character that was entered (-n 1)
read -p "This will backup all existing dotfiles and could break your system. Are you sure? (y/n) " -n 1;
echo "";

## Sync files into the relevant locations, overwriting anything that exists.
if [[ $REPLY =~ ^[Yy]$ ]]; then

  ## Make backups of existing files before we replace anything
  if [[ ${dotfiles[@]} != "" ]]; then
    backup_dir="$backup_location$(date +%s)"
    mkdir -p $backup_dir
    echo "Creating backup @ $backup_dir"
    for file in ${dotfiles[@]}; do
      if [[ -e "$HOME/$file" ]]; then
          cp $HOME/$file $backup_dir/$file
          echo "Backed up $HOME/$file"
      fi
    done

    echo "Existing dotfiles have been backed up."
  else
    echo "No existing dotfiles found."
  fi

  ## Grab the latest version
  git pull origin master

  ## Optionally run the bootstrap script in the following circumstances:
  ## - --forced flag passed
  ## - If the script hasn't been run before
  if [ $forced == "on" -o  ! -e "$HOME/.dotfile-bootstrapped" ]; then
    ./bootstrap
  fi

  rsync --exclude ".git/" \
    --exclude ".DS_Store" \
    --exclude "install" \
    --exclude "install_template.m4" \
    --exclude "bootstrap" \
    --exclude "README.md" \
    --exclude "themes/" \
    --exclude "npm-debug.log" \
    -avh --no-perms . $HOME;

    source $HOME/.bash_profile
else
  echo "User cancelled installation. - :("
fi;


# ] <-- needed because of Argbash
